@value primary, grey from '../../styles/libs/colors.css';

$timingFunction: cubic-bezier(0.215, 0.61, 0.355, 1);
$fadeInOffset: 25px;
$fadeInDuration: .65s;
$stepDuration: .6s;
$controlsDuration: .8s;
$controlSize: 40px;


.container {
  position: relative;
}

.wrapper {

  &.ready {
    opacity: 1 !important;
  }

  &.controlsInside {
    position: relative;
  }
}

.scene {
  overflow: hidden;
  padding-top: 25px;
  margin-top: -25px;
  padding-bottom: 25px;
  margin-bottom: -25px;
}

.slides {
  position: relative;
  width: 9999%;
  display: flex;
}

.slide {
  transform: translateX(0);
  opacity: 1;
  transition: opacity $fadeInDuration $timingFunction,
              transform $fadeInDuration $timingFunction;
}

.slideFadeIn {
  composes: slide;
  transform: translateY($fadeInOffset);
  opacity: 0;
}

.sceneSlide {
  opacity: 1;
}

.targetGroup {
  animation-duration: $stepDuration;
  animation-timing-function: $timingFunction;
}

.removeGroup {
  composes: targetGroup;
  animation-name: remove;
}

.addGroup {
  composes: targetGroup;
  animation-name: add;
}

@keyframes add {
  from {
    width: 0;
  }
}

@keyframes remove {
  to {
    width: 0;
  }
}

.previous, .next {
  position: absolute;
  top: 50%;
  width: 50px;
  height: 50px;
  margin-top: -25px;
  border: 0;
  outline: 0;
  background: 0;
  cursor: pointer;

  &:hover .arrow {
    color: primary;
  }

  .controlsInside & {
    margin-top: -$controlSize;
    width: $controlSize;
    height: $controlSize * 2;
    background: rgba(255,255,255,.35);
    opacity: 1;
    box-shadow: 0 0 15px rgba(0,0,0,.2);
    border-top-left-radius: 100vw;
    border-bottom-left-radius: 100vw;
    transition: left $controlsDuration $timingFunction,
                right $controlsDuration $timingFunction;
    transition-delay: $fadeInDuration;

    .ready & {
      animation-duration: $controlsDuration;
      animation-timing-function: $timingFunction;
      animation-delay: $fadeInDuration;
    }
  }
}

.previous {
  transform: rotate(180deg);

  .controlsInside & {
    left: calc(((100vw - 100%) / 2 + $controlSize) * -1);

    .previousArrow > span {
      position: relative;
      left: -3px;
    }
  }

  .ready.controlsInside & {
    left: calc(((100vw - 100%) / 2) * -1);
  }
}

.next {

  .controlsInside & {
    right: calc(((100vw - 100%) / 2 + $controlSize) * -1);

    .nextArrow > span {
      position: relative;
      left: -3px;
    }
  }

  .ready.controlsInside & {
    right: calc(((100vw - 100%) / 2) * -1);
  }
}

.arrow {
  display: block;
  position: absolute;
  top: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 19pt;
  color: rgba(0,0,0,.35);

  & .controlsInside {
    opacity: .35;
  }
}

.previousArrow, .nextArrow {
  composes: arrow;
}

.controlsInside .previous:hover, .next:hover {
  background: rgba(255,255,255,.45);
}
